import topology.instances.real
import analysis.normed_space.banach_steinhaus

open set filter
open_locale topological_space filter

example {f : ‚Ñù ‚Üí X} (hf : continuous f) : continuous (Œª x : ‚Ñù, f (x^2 + x)) :=
hf.comp $ (continuous_pow 2).add continuous_id


example {u : ‚Ñï ‚Üí X} (hu : tendsto u at_top (ùìù a)) {s : set X} (hs : ‚àÄ n, u n ‚àà s) : 
  a ‚àà closure s :=
begin
  rw metric.tendsto_at_top at hu,
  rw metric.mem_closure_iff,
  intros Œµ Œµ_pos,
  rcases hu Œµ Œµ_pos with ‚ü®N, hN‚ü©,
  refine ‚ü®u N, hs _, _‚ü©,
  rw dist_comm,
  exact hN N le_rfl
end


example {u : ‚Ñï ‚Üí X} (hu : ‚àÄ (n : ‚Ñï), dist (u n) (u (n + 1)) ‚â§ (1 / 2) ^ n) :
  cauchy_seq u :=
begin
  rw metric.cauchy_seq_iff',  
  intros Œµ Œµ_pos,
  obtain ‚ü®N, hN‚ü© : ‚àÉ N : ‚Ñï, 1 / 2 ^ N * 2 < Œµ,
  { have : tendsto (Œª N : ‚Ñï, (1 / 2 ^ N * 2 : ‚Ñù)) at_top (ùìù 0),
    { rw ‚Üê zero_mul (2 : ‚Ñù),
      apply tendsto.mul,
      simp_rw ‚Üê one_div_pow (2 : ‚Ñù),
      apply tendsto_pow_at_top_nhds_0_of_lt_1 ; linarith,
      exact tendsto_const_nhds },
    rcases (at_top_basis.tendsto_iff (nhds_basis_Ioo_pos (0 : ‚Ñù))).mp this Œµ Œµ_pos with ‚ü®N, H, hN‚ü©,
    exact  ‚ü®N, by simpa using (hN N le_rfl).2‚ü© },
  use N,
  intros n hn,
  obtain ‚ü®k, rfl : n = N + k‚ü© := le_iff_exists_add.mp hn,
  calc dist (u (N + k)) (u N) = dist (u (N+0)) (u (N + k)) : by rw [dist_comm, add_zero]
  ... ‚â§ ‚àë i in range k, dist (u (N + i)) (u (N + (i + 1))) : dist_le_range_sum_dist (Œª i, u (N+i)) k
  ... ‚â§ ‚àë i in range k, (1/2 : ‚Ñù) ^ (N+i) : sum_le_sum (Œª i hi, hu $ N+i)
  ... = 1/2^N*‚àë i in range k, (1 / 2)^i : by simp_rw [‚Üê one_div_pow, pow_add, ‚Üê mul_sum]
  ... ‚â§ 1/2^N*2 : mul_le_mul_of_nonneg_left (sum_geometric_two_le _) (one_div_nonneg.mpr (pow_nonneg (zero_le_two : (0 : ‚Ñù) ‚â§ 2)_))
  ... < Œµ : hN
end

example [complete_space X] (f : ‚Ñï ‚Üí set X) (ho : ‚àÄ n, is_open (f n)) (hd : ‚àÄ n, dense (f n)) : dense (‚ãÇn, f n) :=
begin
  let B : ‚Ñï ‚Üí ‚Ñù := Œª n, (1/2)^n,
  have Bpos : ‚àÄ n, 0 < B n, from Œª n, (pow_pos sorry n),
  /- Translate the density assumption into two functions `center` and `radius` associating
  to any n, x, Œ¥, Œ¥pos a center and a positive radius such that
  `closed_ball center radius` is included both in `f n` and in `closed_ball x Œ¥`.
  We can also require `radius ‚â§ (1/2)^(n+1)`, to ensure we get a Cauchy sequence later. -/
  have : ‚àÄ (n : ‚Ñï)  (x : X) (Œ¥ > 0), ‚àÉ (y : X) (r > 0), r ‚â§ B (n+1) ‚àß closed_ball y r ‚äÜ (closed_ball x Œ¥) ‚à© f n,
  { intros n x Œ¥ Œ¥pos,
    have : x ‚àà closure (f n) := hd n x,
    rcases metric.mem_closure_iff.1 this (Œ¥/2) (half_pos Œ¥pos) with ‚ü®y, ys, xy‚ü©,
    rw dist_comm at xy,
    obtain ‚ü®r, rpos, hr‚ü© : ‚àÉ r > 0, closed_ball y r ‚äÜ f n :=
      nhds_basis_closed_ball.mem_iff.1 (is_open_iff_mem_nhds.1 (ho n) y ys),
    refine ‚ü®y, min (min (Œ¥/2) r) (B (n+1)), _, _, Œªz hz, ‚ü®_, _‚ü©‚ü©,
    show 0 < min (min (Œ¥ / 2) r) (B (n+1)),
      from lt_min (lt_min (half_pos Œ¥pos) rpos) (Bpos (n+1)),
    show min (min (Œ¥ / 2) r) (B (n+1)) ‚â§ B (n+1), from min_le_right _ _,
    show z ‚àà closed_ball x Œ¥, from calc
      dist z x ‚â§ dist z y + dist y x : dist_triangle _ _ _
      ... ‚â§ (min (min (Œ¥ / 2) r) (B (n+1))) + (Œ¥/2) : add_le_add hz xy.le
      ... ‚â§ Œ¥/2 + Œ¥/2 : add_le_add_right ((min_le_left _ _).trans (min_le_left _ _)) _ 
      ... = Œ¥ : add_halves Œ¥,
    show z ‚àà f n, from hr (calc
      dist z y ‚â§ min (min (Œ¥ / 2) r) (B (n+1)) : hz
      ... ‚â§ r : (min_le_left _ _).trans (min_le_right _ _)) },
  choose! center radius Hpos HB Hball using this,
  refine Œª x, (mem_closure_iff_nhds_basis nhds_basis_closed_ball).2 (Œª Œµ Œµpos, _),
  /- `Œµ` is positive. We have to find a point in the ball of radius `Œµ` around `x` belonging to all
  `f n`. For this, we construct inductively a sequence `F n = (c n, r n)` such that the closed ball
  `closed_ball (c n) (r n)` is included in the previous ball and in `f n`, and such that
  `r n` is small enough to ensure that `c n` is a Cauchy sequence. Then `c n` converges to a
  limit which belongs to all the `f n`. -/
  let F : ‚Ñï ‚Üí (X √ó ‚Ñù) := Œªn, nat.rec_on n (prod.mk x (min Œµ (B 0)))
                              (Œªn p, prod.mk (center n p.1 p.2) (radius n p.1 p.2)),
  let c : ‚Ñï ‚Üí X := Œª n, (F n).1,
  let r : ‚Ñï ‚Üí ‚Ñù := Œª n, (F n).2,
  have rpos : ‚àÄ n, 0 < r n,
  { assume n,
    induction n with n hn,
    exact lt_min Œµpos (Bpos 0),
    exact Hpos n (c n) (r n) hn },
  
  have rB : ‚àÄn, r n ‚â§ B n,
  { assume n,
    induction n with n hn,
    exact min_le_right _ _,
    exact HB n (c n) (r n) (rpos n) },
  have incl : ‚àÄn, closed_ball (c (n+1)) (r (n+1)) ‚äÜ (closed_ball (c n) (r n)) ‚à© (f n) :=
    Œª n, Hball n (c n) (r n) (rpos n),
  have cdist : ‚àÄ n, dist (c n) (c (n+1)) ‚â§ B n,
  { assume n,
    rw dist_comm,
    have A : c (n+1) ‚àà closed_ball (c (n+1)) (r (n+1)) := mem_closed_ball_self (rpos $ n +1).le,
    have I := calc
      closed_ball (c (n+1)) (r (n+1)) ‚äÜ closed_ball (c n) (r n) :
         (incl n).trans (inter_subset_left _ _)
      ... ‚äÜ closed_ball (c n) (B n) : closed_ball_subset_closed_ball (rB n),
    exact I A },
  have : cauchy_seq c,
  from cauchy_seq_of_le_geometric_two' cdist,
  -- as the sequence `c n` is Cauchy in a complete space, it converges to a limit `y`.
  rcases cauchy_seq_tendsto_of_complete this with ‚ü®y, ylim‚ü©,
  -- this point `y` will be the desired point. We will check that it belongs to all
  -- `f n` and to `ball x Œµ`.
  use y,
  
  have I : ‚àÄn, ‚àÄ m ‚â• n, closed_ball (c m) (r m) ‚äÜ closed_ball (c n) (r n),
  { assume n,
    refine nat.le_induction _ (Œªm hnm h, _),
    { exact subset.rfl },
    { exact (incl m).trans ((set.inter_subset_left _ _).trans h) }},
  have yball : ‚àÄn, y ‚àà closed_ball (c n) (r n),
  { assume n,
    refine is_closed_ball.mem_of_tendsto ylim _,
    refine (filter.eventually_ge_at_top n).mono (Œª m hm, _),
    exact I n m hm (mem_closed_ball_self (rpos _).le) },
  split,
  { suffices : ‚àÄ n, y ‚àà f n, by rwa set.mem_Inter,    
    intro n,
    have : closed_ball (c (n+1)) (r (n+1)) ‚äÜ f n := subset.trans (incl n) (inter_subset_right _ _),
    exact this (yball (n+1)) },
  calc dist y x ‚â§ r 0 : yball 0
            ... ‚â§ Œµ : min_le_left _ _,
end

